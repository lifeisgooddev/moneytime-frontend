{"version":3,"sources":["views/TimePools/components/types.ts","views/TimePools/components/FarmCard/DetailsSection.tsx","views/TimePools/components/FarmCard/CardHeading.tsx","views/TimePools/components/DepositModal.tsx","views/TimePools/components/WithdrawModal.tsx","views/TimePools/components/FarmCard/StakeAction.tsx","views/TimePools/components/FarmCard/HarvestAction.tsx","views/TimePools/components/FarmCard/CardActionsContainer.tsx","views/TimePools/components/FarmCard/ApyCalculatorModal.tsx","views/TimePools/components/FarmCard/ApyButton.tsx","views/TimePools/components/FarmCard/FarmCard.tsx","views/TimePools/components/FarmTable/Apr.tsx","views/TimePools/components/FarmTable/Farm.tsx","views/TimePools/components/FarmTable/Earned.tsx","views/TimePools/components/FarmTable/Fee.tsx","views/TimePools/components/FarmTable/Details.tsx","views/TimePools/components/Tooltip/Tooltip.tsx","views/TimePools/components/FarmTable/Multiplier.tsx","views/TimePools/components/FarmTable/Liquidity.tsx","views/TimePools/components/FarmTable/Actions/styles.ts","views/TimePools/components/FarmTable/Actions/HarvestAction.tsx","views/TimePools/components/FarmTable/Actions/StakedAction.tsx","views/TimePools/components/FarmTable/Actions/ActionPanel.tsx","views/TimePools/components/FarmTable/CellLayout.tsx","views/TimePools/components/FarmTable/Row.tsx","views/TimePools/components/FarmTable/FarmTable.tsx","views/TimePools/components/FarmTabButtons/index.tsx","views/TimePools/components/SearchInput.tsx","views/TimePools/components/ToggleView/ToggleView.tsx","views/TimePools/components/Select/Select.tsx","views/TimePools/Farms.tsx","utils/getLiquidityUrlPathParts.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","components/ModalInput/ModalInput.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","components/ExpandableSectionButton/index.ts"],"names":["ViewMode","Wrapper","styled","div","StyledLinkExternal","LinkExternal","theme","colors","text","primary","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","external","bold","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","variant","DepositModal","max","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","ModalInput","onSelectMax","onChange","symbol","inputTitle","ModalActions","onClick","disabled","a","style","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStakeMoney","onUnstake","useUnstakeMoney","rawStakedBalance","getBalanceNumber","displayBalance","toLocaleString","useModal","onPresentDeposit","onPresentWithdraw","color","mr","HarvestAction","earnings","account","useWeb3React","rawEarningsBalance","useHarvestMoney","onReward","Action","CardActions","farm","requestedApproval","setRequestedApproval","useTimepoolFromSymbol","lpSymbol","lpAddresses","useTimepoolUser","allowance","lpName","getAddress","toUpperCase","isApproved","isGreaterThan","stakingTokenContract","useWeb3","useERC20","token","address","onApprove","useApproveMoney","handleApprove","console","error","textTransform","fontSize","pr","mt","UnlockButton","Grid","GridItem","Description","Text","ApyCalculatorModal","moneyPrice","apy","oneThousandDollarsWorthOfCake","toNumber","cakeEarnedPerThousand1D","calculateCakeEarnedPerThousandDollars","numberOfDays","farmApy","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","apyModalRoi","amountEarned","amountInvested","ApyButton","onPresentApyModal","event","stopPropagation","scale","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","showExpandableSection","setShowExpandableSection","communityFarms","includes","toLocaleLowerCase","liquidity","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","quoteToken","tokenAddress","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","ExpandableSectionButton","process","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","mediaQueries","sm","Farm","image","label","Amount","span","earned","textDisabled","Earned","Fee","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","TooltipContent","tooltip","zIndices","modal","Tooltip","content","children","MultiplierWrapper","Multiplier","displayMultipler","toLowerCase","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","input","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","earningsBigNumber","BigNumber","usePriceMoneyBusd","earningsBusd","multipliedBy","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","lpAddress","bsc","info","name","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","depositFee","withdrawFee","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","StyledInput","Input","InputWrapper","SearchInput","setToggled","inputEl","placeholder","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","DropDownHeader","shadows","inset","inputSecondary","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","boxShadow","DropDownList","ul","ListItem","li","Select","options","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Header","gradients","bubblegum","Farms","path","pathname","useLocation","farmsLP","useTimepools","query","setQuery","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","dispatch","useDispatch","fastRefresh","useRefresh","fetchTimepoolUserDataAsync","stackedOnly","setStackedOnly","activeFarms","filter","inactiveFarms","stackedOnlyFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPY","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","getFarmApy","poolWeight","lowercaseQuery","isActive","farmsStaked","rowData","farms","orderBy","slice","sortFarms","size","Page","checked","marginLeft","target","length","sort","b","exact","renderContent","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","tokenAddressString","secondPart","aria-label","role","defaultProps","StyledTokenInput","isWarning","warning","xs","StyledErrorMessage","isBalanceZero","parseFloat","toFixed","position","pl","number","apyAsDecimal","daysAsDecimalOfYear","principal","finalAmount","Math","round"],"mappings":"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","file":"static/js/10.ea27a577.chunk.js","sourcesContent":["export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  translationId: number\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APY: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(1070, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(588, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport {useStakeMoney} from 'hooks/useStake'\r\nimport {useUnstakeMoney} from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStakeMoney(pid, \"TIME\")\r\n  const { onUnstake } = useUnstakeMoney(pid, \"TIME\")\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvestMoney } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestMoney(pid, \"TIME\")\r\n\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {/* <Button\r\n        disabled={rawEarningsBalance === 0 || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {TranslateString(562, 'Harvest')}\r\n      </Button> */}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useTimepoolFromSymbol, useTimepoolUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { useApproveMoney } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = useTimepoolFromSymbol(farm.lpSymbol)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useTimepoolUser(pid)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n\r\n  const stakingTokenContract = useERC20(getAddress(farm.token.address))\r\n\r\n  const { onApprove } = useApproveMoney(stakingTokenContract, farm.token.symbol)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          TIME\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1072, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1074, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  moneyPrice?: BigNumber\r\n  apy?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  moneyPrice,\r\n  apy,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const oneThousandDollarsWorthOfCake = 1000 / moneyPrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy: apy, moneyPrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy: apy, moneyPrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy: apy, moneyPrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({\r\n    numberOfDays: 365,\r\n    farmApy: apy,\r\n    moneyPrice,\r\n  })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(864, 'CAKE per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          866,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  moneyPrice?: BigNumber\r\n  apy?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, moneyPrice, apy, addLiquidityUrl }) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal lpLabel={lpLabel} moneyPrice={moneyPrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: number\r\n  liquidity?: BigNumber,\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  moneyPrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, moneyPrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const isCommunityFarm = communityFarms.includes(farm.token.symbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormated = farm.liquidity\r\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'TIME'\r\n\r\n  const farmAPY = farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.token.symbol === 'CAKE' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={isCommunityFarm}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.token.symbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} moneyPrice={moneyPrice} apy={farm.apy} />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  moneyPrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  moneyPrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  return (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} moneyPrice={moneyPrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTimepoolUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Text, Image } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useTimepoolUser(pid)\r\n  const TranslateString = useI18n()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          {TranslateString(999, 'FARMING')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\r\n  const { account } = useWeb3React()\r\n  const amountEarned = account ? earnings : null\r\n\r\n  const displayBalance = amountEarned ? amountEarned.toLocaleString() : '?'\r\n  return <Amount earned={amountEarned}>{displayBalance}</Amount>\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface FeeProps {\r\n  value: number\r\n}\r\n\r\nconst Amount = styled.span`\r\n  color: ${({ theme }) => (theme.colors.text)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Fee: React.FunctionComponent<FeeProps> = ({ value }) => {\r\n  return <Amount>{value}</Amount>\r\n}\r\n\r\nexport default Fee\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const TranslateString = useI18n()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && TranslateString(658, 'Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface TooltipProps {\r\n  content: React.ReactNode\r\n}\r\n\r\nconst TooltipContent = styled.div`\r\n  background: ${({ theme }) => theme.tooltip.background};\r\n  padding: 16px;\r\n  border-radius: 16px;\r\n  color: ${({ theme }) => theme.tooltip.text};\r\n  width: max-content;\r\n  display: none;\r\n  padding: 16px;\r\n  max-height: 500px;\r\n  z-index: ${({ theme }) => theme.zIndices.modal};\r\n  position: absolute;\r\n  bottom: calc(100% + 16px);\r\n  transform: translate(34px, 0);\r\n  right: 0;\r\n  max-width: 246px;\r\n\r\n  &:after {\r\n    content: '';\r\n    display: block;\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 10px solid transparent;\r\n    border-right: 10px solid transparent;\r\n    border-top: 10px solid ${({ theme }) => theme.tooltip.background};\r\n    bottom: 0;\r\n    position: absolute;\r\n    transform: translate(-34px, 9px);\r\n    right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n\r\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children }) => {\r\n  return (\r\n    <Container>\r\n      {children}\r\n      <TooltipContent>{content}</TooltipContent>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Tooltip\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Tooltip from '../Tooltip/Tooltip'\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    margin-left: 14px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    svg {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultipler = multiplier ? multiplier.toLowerCase() : '-'\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultipler}</MultiplierWrapper>\r\n      <Tooltip\r\n        content={\r\n          <div>\r\n            {TranslateString(999, 'The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n            <br />\r\n            <br />\r\n            {TranslateString(\r\n              999,\r\n              'For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.',\r\n            )}\r\n          </div>\r\n        }\r\n      >\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </Tooltip>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Tooltip from '../Tooltip/Tooltip'\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: number\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    margin-left: 14px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    svg {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity = liquidity\r\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </Tooltip>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useHarvestMoney } from 'hooks/useHarvest'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePriceMoneyBusd } from 'state/hooks'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\r\n  const { account } = useWeb3React()\r\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\r\n  const moneyPrice = usePriceMoneyBusd()\r\n  let earnings = null\r\n  let earningsBusd = 0\r\n  let displayBalance = '?'\r\n\r\n  if (earningsBigNumber) {\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(moneyPrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestMoney(pid, \"TIME\")\r\n  const TranslateString = useI18n()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>TIME </Title>\r\n        <Subtle>{TranslateString(999, 'EARNED')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          <Staked>~{countUp}USD</Staked>\r\n        </div>\r\n        {/* <Button\r\n          disabled={!earnings || pendingTx || !account}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {TranslateString(562, 'Harvest')}\r\n        </Button> */}\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@pancakeswap-libs/uikit'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTimepoolUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useApproveMoney } from 'hooks/useApprove'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport {useStakeMoney} from 'hooks/useStake'\r\nimport {useUnstakeMoney} from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({ pid, lpSymbol, lpAddresses, quoteToken, token }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useTimepoolUser(pid)\r\n  const { onStake } = useStakeMoney(pid, \"TIME\")\r\n  const { onUnstake } = useUnstakeMoney(pid, \"TIME\")\r\n  const web3 = useWeb3()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  // ('isApproved = ', isApproved, account, allowance.toString())\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\r\n\r\n  const stakingTokenContract = useERC20(getAddress(token.address))\r\n\r\n  const { onApprove } = useApproveMoney(stakingTokenContract, token.symbol)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance}</Earned>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\r\n            {TranslateString(999, 'Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {TranslateString(999, 'Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { LinkExternal, Text } from '@pancakeswap-libs/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { communityFarms } from 'config/constants'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity }) => {\r\n  const farm = details\r\n\r\n  const TranslateString = useI18n()\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = `https://bscscan.com/address/${lpAddress}`\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n  const isCommunityFarm = communityFarms.includes(token.symbol)\r\n\r\n  return (\r\n    <Container>\r\n      <InfoContainer>\r\n        <StakeContainer>\r\n          <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n            {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n          </StyledLinkExternal>\r\n        </StakeContainer>\r\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(736, 'APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} />\r\n        <StakedAction {...farm} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Fee, { FeeProps } from './Fee'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps,\r\n  details: FarmWithStakedValue,\r\n  depositFee: FeeProps,\r\n  withdrawFee: FeeProps\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  depositFee: Fee,\r\n  withdrawFee: Fee,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowProps> = (props) => {\r\n  const { details } = props\r\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\r\n  const TranslateString = useI18n()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelToggled(!actionPanelToggled)\r\n  }\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelToggled} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={TranslateString(736, 'APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout\r\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\r\n                      >\r\n                        {React.createElement(cells[key], props[key])}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={TranslateString(1072, 'Earned')}>\r\n                <Earned {...props.earned} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={TranslateString(736, 'APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={TranslateString(800, 'Deposit Fee')}>\r\n                {details.depositFee} \r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelToggled} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {actionPanelToggled && details && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n}\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const TranslateString = useI18n()\r\n  const { data, columns } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {TranslateString(999, 'To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = () => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(1198, 'Live')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(388, 'Finished')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useState, useRef } from 'react'\r\nimport { Input } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 234px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  value: string\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\r\n  const [toggled, setToggled] = useState(false)\r\n  const inputEl = useRef(null)\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          ref={inputEl}\r\n          value={value}\r\n          onChange={onChange}\r\n          placeholder=\"Search farms\"\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToogleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToogleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOption, setSelectedOption] = useState(options[0])\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = () => setIsOpen(!isOpen)\r\n\r\n  const onOptionClicked = (option: OptionProps) => () => {\r\n    setSelectedOption(option)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(option)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{selectedOption.label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option) =>\r\n            option.label !== selectedOption.label ? (\r\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useTimepools, usePriceMoneyBusd, useGetApiPrices } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchTimepoolUserDataAsync } from 'state/actions'\r\nimport { Timepool } from 'state/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApy } from 'utils/apy'\r\nimport { orderBy } from 'lodash'\r\n\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\nimport Select, { OptionProps } from './components/Select/Select'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\n\r\nconst Header = styled.div`\r\n  padding: 32px 0px;\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useTimepools()\r\n  const moneyPrice = usePriceMoneyBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useState(ViewMode.CARD)\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const prices = useGetApiPrices()\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchTimepoolUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stackedOnly, setStackedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X')\r\n  const stackedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        return orderBy(farms, 'apy', 'desc')\r\n      case 'multiplier':\r\n        return orderBy(\r\n          farms,\r\n          (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n          'desc',\r\n        )\r\n      case 'earned':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\r\n      case 'liquidity':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n      default:\r\n        return farms\r\n    }\r\n  }\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Timepool[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !prices) {\r\n          return farm\r\n        }\r\n\r\n        const quoteTokenPriceUsd = prices[farm.quoteToken.symbol.toLowerCase()]\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n        const apy = getFarmApy(farm.poolWeight, moneyPrice, totalLiquidity)\r\n\r\n        return { ...farm, apy, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\r\n          if (farm.lpSymbol.toLowerCase().includes(lowercaseQuery)) {\r\n            return true\r\n          }\r\n\r\n          return false\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPY\r\n    },\r\n    [moneyPrice, prices, query],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const isActive = !pathname.includes('history')\r\n  let farmsStaked = []\r\n  if (isActive) {\r\n    farmsStaked = stackedOnly ? farmsList(stackedOnlyFarms) : farmsList(activeFarms)\r\n  } else {\r\n    farmsStaked = farmsList(inactiveFarms)\r\n  }\r\n\r\n  farmsStaked = sortFarms(farmsStaked)\r\n\r\n  const rowData = farmsStaked.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        moneyPrice,\r\n        originalValue: farm.apy,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n      depositFee: { \r\n        value: farm.depositFee\r\n      },\r\n      withdrawFee: {\r\n        value: farm.withdrawFee\r\n      }\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStaked.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} moneyPrice={moneyPrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStaked.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} moneyPrice={moneyPrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {TranslateString(999, 'Farms')}\r\n        </Heading>\r\n        <Heading size=\"lg\" color=\"text\">\r\n          {TranslateString(999, 'Stake TIME tokens to earn MONEY token')}\r\n        </Heading>\r\n      </Header>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} scale=\"sm\" />\r\n              <Text> {TranslateString(1116, 'Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text>SORT BY</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: 'Hot',\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: 'APR',\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: 'Multiplier',\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: 'Earned',\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: 'Liquidity',\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text>SEARCH</Text>\r\n              <SearchInput onChange={handleChangeQuery} value={query} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? TranslateString(999, 'Hide') : TranslateString(658, 'Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, moneyPrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / moneyPrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  moneyPrice?: BigNumber\r\n  apy?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  moneyPrice,\r\n  apy,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const oneThousandDollarsWorthOfCake = 1000 / moneyPrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy: apy, moneyPrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy: apy, moneyPrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy: apy, moneyPrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({\r\n    numberOfDays: 365,\r\n    farmApy: apy,\r\n    moneyPrice,\r\n  })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(864, 'CAKE per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          866,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  moneyPrice?: BigNumber\r\n  apy?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, moneyPrice, apy, addLiquidityUrl }) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal lpLabel={lpLabel} moneyPrice={moneyPrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","export { default } from './ExpandableSectionButton'\r\n"],"sourceRoot":""}