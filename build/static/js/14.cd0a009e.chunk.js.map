{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPYCard.tsx","views/Home/components/EarnAssetCard.tsx","hooks/useLotteryTotalPrizesUsd.ts","views/Home/components/WinCard.tsx","views/Home/Home.tsx","../node_modules/lodash/max.js","../node_modules/lodash/_baseExtremum.js","../node_modules/lodash/_baseGt.js"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefTimeAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","earningsBusd","multipliedBy","usePriceMoneyBusd","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","count","UnlockButton","CakeWinnings","claimAmount","useTotalClaim","cakeAmount","claimAmountBusd","LotteryJackpot","lotteryPrizeAmount","useTotalRewards","lotteryPrizeAmoutCake","toLocaleString","maximumFractionDigits","lotteryPrizeAmountBusd","StyledLotteryCard","lotteryHasDrawn","useGetLotteryHasDrawn","requesteClaim","setRequestedClaim","allowance","useLotteryAllowance","useModal","PurchaseWarningModal","onPresentApprove","onMultiClaim","useMultiClaimLottery","useApproval","handleApprove","requestedApproval","handleClaim","console","error","max","tokenName","onPresentBuy","marginRight","variant","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responsedata","fetchData","useGetStats","tvl","total_value_locked_all","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","prices","useGetApiPrices","moneyPrice","highestApy","useMemo","apys","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","quoteToken","symbol","toLowerCase","totalLiquidity","times","getFarmApy","poolWeight","maxApy","animation","justifyContent","exact","activeClassName","to","mt","EarnAssetCard","activeNonCakePools","pools","pool","isFinished","earningToken","includes","latestPools","orderBy","slice","assets","join","useLotteryTotalPrizesUsd","totalRewards","WinCard","lotteryPrize","Math","round","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","LotteryCard","baseExtremum","require","baseGt","identity","module","exports","array","isSymbol","iteratee","comparator","computed","result","other"],"mappings":"oYAyCeA,EA3Ba,WAAO,IAAD,EACkBC,mBAA4B,IAD9C,mBACzBC,EADyB,KACNC,EADM,KAExBC,EAAYC,cAAZD,QACAE,EAAgBC,cAAhBD,YAqBR,OAnBAE,qBAAU,WAcJJ,GAbe,uCAAG,gCAAAK,EAAA,6DACdC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,cACNC,OAAQ,CAACJ,EAAKK,IAAKd,OAJD,SAOKe,YAAUC,EAAeV,GAP9B,OAOdW,EAPc,OAQdC,EAAUX,IAAYC,KAAI,SAACC,EAAMU,GAAP,mBAAC,eAAsBV,GAAvB,IAA6BW,QAAS,IAAIC,IAAUJ,EAAWE,SAE/FpB,EAAqBmB,GAVD,2CAAH,oDAcjBI,KAED,CAACtB,EAASE,IAENJ,G,SCJMyB,EA1BQ,WAAO,IAAD,EACI1B,mBAAS,IADb,mBACpB2B,EADoB,KACVC,EADU,KAEnBzB,EAAYC,cAAZD,QACAE,EAAgBC,cAAhBD,YAoBR,OAlBAE,qBAAU,WAaJJ,GAZkB,uCAAG,8BAAAK,EAAA,6DACjBC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,cACNC,OAAQ,CAACJ,EAAKK,IAAKd,OAJE,SAOLe,YAAUC,EAAeV,GAPpB,OAOjBoB,EAPiB,OASvBD,EAAWC,GATY,2CAAH,oDAapBC,KAED,CAAC3B,EAASE,IAENsB,G,wBCgBMI,EAjC6B,SAAC,GAQtC,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,SAMI,IALJC,gBAKI,MALO,OAKP,MAJJC,kBAII,MAJS,IAIT,MAHJC,cAGI,MAHK,GAGL,MAFJC,YAEI,aADJC,aACI,MADI,OACJ,IACwBC,qBAAW,CACrCC,MAAO,EACPC,IAAKT,EACLU,SAAU,EACVC,UAAW,IACXV,cAEeW,IAAbX,EAAyBA,EAAWD,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlEa,EADJ,EACIA,QAASC,EADb,EACaA,OAUXC,EAAcC,iBAAOF,GAM3B,OAJAvC,qBAAU,WACRwC,EAAYE,QAAQjB,KACnB,CAACA,EAAOe,IAGT,eAAC,KAAD,CAAMV,KAAMA,EAAMH,SAAUA,EAAUgB,MAAO,CAAEf,cAAcG,MAAOA,EAApE,UACGF,EACAS,MCjCQM,GANiC,SAACC,GAC/C,OACE,cAAC,EAAD,aAAWlB,SAAS,OAAOC,WAAW,MAAMG,MAAM,aAAaF,OAAO,KAAKC,MAAM,EAAOJ,SAAU,GAAOmB,KCMvGC,GAAQC,IAAOC,IAAV,uDA8BIC,GAzBY,WACzB,IAAMC,EAAkBC,cAChBvD,EAAYC,cAAZD,QAEFwD,EADcjC,IACYkC,QAAO,SAACC,EAAOC,GAC7C,OAAOD,EAAQ,IAAIrC,IAAUsC,GAASP,IAAI,IAAI/B,IAAU,IAAIuC,IAAI,KAAKC,aACpE,GACGC,EAAe,IAAIzC,IAAUmC,GAAaO,aAAaC,eAAqBH,WAElF,OAAK7D,EASH,eAACkD,GAAD,WACE,cAAC,EAAD,CAAWrB,MAAO2B,EAAaxB,WAAW,QAC1C,cAAC,GAAD,CAAeH,MAAOiC,OATtB,cAAC,KAAD,CAAM3B,MAAM,eAAeY,MAAO,CAAEf,WAAY,QAAhD,SACGsB,EAAgB,IAAK,a,mBCMfW,GAtBW,WACxB,IAAMX,EAAkBC,cAClBW,EAAcC,aAAgBC,eAC9BC,EAAc,IAAIhD,YAAUiD,aAAiBJ,IAAcH,aAAaC,eAAqBH,WAGnG,OAFoB5D,cAAZD,QAWN,qCACE,cAAC,EAAD,CAAW6B,MAAOyC,aAAiBJ,GAAcpC,SAAU,EAAGC,SAAS,OAAOC,WAAW,SACzF,cAAC,GAAD,CAAeH,MAAOwC,OATtB,cAAC,KAAD,CAAMlC,MAAM,eAAeY,MAAO,CAAEf,WAAY,QAAhD,SACGsB,EAAgB,IAAK,aCVxBiB,GAAwBpB,YAAOqB,IAAPrB,CAAH,uKAOrBD,GAAQC,IAAOC,IAAV,oDAILqB,GAAYtB,IAAOuB,IAAV,oDAITC,GAAQxB,IAAOC,IAAV,+DACA,qBAAGwB,MAAkBC,OAAOC,cAIjCC,GAAU5B,IAAOC,IAAV,iDA8DE4B,GA1DW,WAAO,IAAD,EACInF,oBAAS,GADb,mBACvBoF,EADuB,KACZC,EADY,KAEtBlF,EAAYC,cAAZD,QACFsD,EAAkBC,cAElB4B,EADmBvF,IACkBwF,QAAO,SAACC,GAAD,OAAiBA,EAAYjE,QAAQyC,WAAa,KAE5FyB,EAAaC,YAAcJ,EAAkB3E,KAAI,SAACgF,GAAD,OAAqBA,EAAgB1E,QAAtFwE,SAEFG,EAAkBC,sBAAW,sBAAC,sBAAArF,EAAA,6DAClC6E,GAAa,GADqB,kBAG1BI,IAH0B,6EAOhCJ,GAAa,GAPmB,0EASjC,CAACI,IAEJ,OACE,cAACf,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASoB,KAAK,KAAKC,GAAG,OAAtB,SACGtC,EAAgB,IAAK,qBAExB,cAACmB,GAAD,CAAWoB,IAAI,mBAAmBC,IAAI,YAAYC,MAAO,GAAIC,OAAQ,KACrE,eAAC,GAAD,WACE,eAACrB,GAAD,WAAQrB,EAAgB,IAAK,mBAA7B,OACA,cAAC,GAAD,OAEF,eAAC,GAAD,WACE,eAACqB,GAAD,WAAQrB,EAAgB,IAAK,kBAA7B,OACA,cAAC,GAAD,OAEF,cAACyB,GAAD,UACG/E,EACC,cAAC,IAAD,CACEiG,GAAG,cACHC,SAAUf,EAAkBgB,QAAU,GAAKlB,EAC3CmB,QAASX,EACTM,MAAM,OAJR,SAMGd,EACG3B,EAAgB,IAAK,mBACrBA,EAAgB,IAAD,uBAAsB6B,EAAkBgB,OAAxC,KAAmD,CAChEE,MAAOlB,EAAkBgB,WAIjC,cAACG,EAAA,EAAD,CAAcP,MAAM,iB,sEC5E1B7C,GAAQC,IAAOC,IAAV,wDAiBImD,GAbM,WAAO,IAClBC,EAAgBC,eAAhBD,YACFE,EAAapC,aAAiBkC,GAC9BG,EAAkB,IAAItF,YAAUqF,GAAY3C,aAAaC,eAAqBH,WAEpF,OACE,eAAC,GAAD,WACE,cAAC,EAAD,CAAWhC,MAAO6E,EAAY1E,WAAW,QACzC,cAAC,GAAD,CAAeH,MAAO8E,EAAiB7E,SAAU,QCOxC8E,GAnBQ,WACrB,IAAMtD,EAAkBC,cAClBsD,EAAqBC,eACrB1F,EAAUkD,aAAiBuC,GAC3BE,EAAwB3F,EAAQ4F,oBAAevE,EAAW,CAC9DwE,sBAAuB,IAEnBC,EAAyB,IAAI7F,YAAUD,GAAS2C,aAAaC,eAAqBH,WAExF,OACE,qCACE,eAAC,KAAD,CAAM3B,MAAI,EAACH,SAAS,OAAOgB,MAAO,CAAEf,WAAY,OAAhD,UACG+E,EADH,IAC2BzD,EAAgB,IAAK,WAEhD,cAAC,GAAD,CAAezB,MAAOqF,QCJtBC,GAAoBhE,YAAOqB,IAAPrB,CAAH,yKAOjBD,GAAQC,IAAOC,IAAV,oDAILqB,GAAYtB,IAAOuB,IAAV,oDAITC,GAAQxB,IAAOC,IAAV,+DACA,qBAAGwB,MAAkBC,OAAOC,cAIjCC,GAAU5B,IAAOC,IAAV,wGAuFE4B,GA/EW,WAAO,IACvBhF,EAAYC,cAAZD,QACFoH,EAAkBC,eAFM,EAGaxH,oBAAS,GAHtB,mBAGvByH,EAHuB,KAGRC,EAHQ,KAIxBjE,EAAkBC,cAClBiE,EAAYC,eALY,EAMHC,aAAS,cAACC,GAAA,EAAD,KAA7BC,EANuB,oBAOtBpB,EAAgBC,eAAhBD,YACAqB,EAAiBC,eAAjBD,aACF3D,EAAcC,aAAgBC,eATN,EAUe2D,aAAYH,GAAjDI,EAVsB,EAUtBA,cAAeC,EAVO,EAUPA,kBAEjBC,EAAcxC,sBAAW,sBAAC,sBAAArF,EAAA,sEAE5BkH,GAAkB,GAFU,SAGPM,IAHO,eAM1BN,GAAkB,GANQ,gDAS5BY,QAAQC,MAAR,MAT4B,yDAW7B,CAACP,EAAcN,IAvBY,EAwCPG,aAAS,cAAC,KAAD,CAAUW,IAAKnE,EAAaoE,UAAU,UAA/DC,EAxCuB,oBA0C9B,OACE,cAACpB,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASxB,KAAK,KAAKC,GAAG,OAAtB,SACGtC,EAAgB,IAAK,2BAExB,cAAC,GAAD,CAAWuC,IAAI,qBAAqBC,IAAI,YAAYC,MAAO,GAAIC,OAAQ,KACvE,eAAC,GAAD,WACE,eAAC,GAAD,WAAQ1C,EAAgB,IAAK,mBAA7B,OACA,cAAC,GAAD,OAEF,eAAC,GAAD,WACE,eAAC,GAAD,WAAQA,EAAgB,IAAK,4BAA7B,OACA,cAAC,GAAD,OAEDtD,EACC,eAAC,GAAD,WACE,cAAC,IAAD,CACEiG,GAAG,6BACHC,SAA4C,IAAlC5B,aAAiBkC,IAAsBc,EACjDlB,QAAS8B,EACTnF,MAAO,CAAEyF,YAAa,OAJxB,SAMGlF,EAAgB,IAAK,sBAvC3BkE,EAAU3D,WAQb,cAAC,IAAD,CAAQoC,GAAG,wBAAwBwC,QAAQ,YAAYrC,QAASmC,EAAcrC,SAAUkB,EAAxF,SACG9D,EAAgB,IAAK,iBAPtB,cAAC,IAAD,CAAQyC,MAAM,OAAOG,SAAU+B,EAAmB7B,QAAS4B,EAA3D,SACG1E,EAAgB,IAAK,qBAyCtB,cAAC,GAAD,UACE,cAACgD,EAAA,EAAD,CAAcP,MAAM,iBC7G1B2C,GAAkBvF,YAAOqB,IAAPrB,CAAH,yEAKfwF,GAAMxF,IAAOC,IAAV,oJAqCMwF,GA7BG,WAChB,IAAMtF,EAAkBC,cAClBsF,EAAcC,eACdC,EAAgBzE,aAAiB0E,aAAiB5E,gBAClD6E,EAAaJ,EAAcvE,aAAiBuE,GAAeE,EAAgB,EAEjF,OACE,cAACL,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAS/C,KAAK,KAAKC,GAAG,OAAtB,SACGtC,EAAgB,IAAK,gBAExB,eAACqF,GAAD,WACE,cAAC,KAAD,CAAM5G,SAAS,OAAf,SAAuBuB,EAAgB,IAAK,uBAC3C2F,GAAc,cAAC,EAAD,CAAWlH,SAAS,OAAOF,MAAOoH,OAEnD,eAACN,GAAD,WACE,cAAC,KAAD,CAAM5G,SAAS,OAAf,SAAuBuB,EAAgB,IAAK,uBAC5C,cAAC,EAAD,CAAWvB,SAAS,OAAOD,SAAU,EAAGD,MAAOkH,OAEjD,eAACJ,GAAD,WACE,cAAC,KAAD,CAAM5G,SAAS,OAAf,SAAuBuB,EAAgB,IAAK,oBAC5C,cAAC,EAAD,CAAWvB,SAAS,OAAOD,SAAU,EAAGD,MAAO,cCtCnDqH,GAA6B/F,YAAOqB,IAAPrB,CAAH,kFAgCjBgG,GA1Bc,WAC3B,IAAM7F,EAAkBC,cAClB6F,ECemB,WAAO,IAAD,EACPvJ,mBAAiC,MAD1B,mBACxBuJ,EADwB,KAClBC,EADkB,KAkB/B,OAfAjJ,qBAAU,YACO,uCAAG,8BAAAC,EAAA,+EAESiJ,MAAM,GAAD,OA7Bb,qCA6Ba,UAFd,cAERC,EAFQ,gBAG8BA,EAASC,OAHvC,OAGRC,EAHQ,OAKdJ,EAAQI,GALM,kDAOdtB,QAAQC,MAAM,wBAAd,MAPc,0DAAH,oDAWfsB,KACC,CAACL,IAEGD,EDjCMO,GACPC,EAAMR,EAAOA,EAAKS,uBAAuB7C,eAAe,QAAS,CAAEC,sBAAuB,IAAO,KAEvG,OACE,cAACiC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASvD,KAAK,KAAKC,GAAG,OAAtB,SACGtC,EAAgB,IAAK,8BAEvB8F,EACC,qCACE,cAAC,IAAD,CAASzD,KAAK,KAAd,oBAAwBiE,KACxB,cAAC,KAAD,CAAMzH,MAAM,aAAZ,SAA0BmB,EAAgB,IAAK,uCAGjD,mCACE,cAAC,KAAD,CAAU0C,OAAQ,a,wCEpBxBzB,GAAwBpB,YAAOqB,IAAPrB,CAAH,+IAKvB,qBAAGyB,MAAkBkF,aAAaC,MAKhCC,GAAiB7G,YAAO8G,KAASC,MAAM,CAAEvE,KAAM,MAA9BxC,CAAH,kDAoDLgH,GAjDK,WAClB,IAAM7G,EAAkBC,cAClB6G,EAAUC,cACVC,EAASC,cACTC,EAAaxG,cAEbyG,EAAaC,mBAAQ,WACzB,IAAMC,EAAOP,EAEVhF,QAAO,SAAC3E,GAAD,OAAuB,IAAbA,EAAKK,KAAiC,OAApBL,EAAKmK,cACxCpK,KAAI,SAACC,GACJ,GAAIA,EAAKoK,qBAAuBP,EAAQ,CACtC,IAAMQ,EAAqBR,EAAO7J,EAAKsK,WAAWC,OAAOC,eACnDC,EAAiB,IAAI7J,IAAUZ,EAAKoK,qBAAqBM,MAAML,GACrE,OAAOM,aAAW3K,EAAK4K,WAAYb,EAAYU,GAEjD,OAAO,QAGLI,EAASjD,KAAIsC,GACnB,cAAOW,QAAP,IAAOA,OAAP,EAAOA,EAAQtE,eAAe,QAAS,CAAEC,sBAAuB,MAC/D,CAACuD,EAAYJ,EAASE,IAEzB,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASnI,MAAM,WAAWwD,KAAK,KAA/B,wBAGA,cAACqE,GAAD,CAAgB7H,MAAM,UAAtB,SACGsI,EAAU,UACNA,EADM,aACSnH,EAAgB,IAAK,QAEvC,cAAC,KAAD,CAAUiI,UAAU,QAAQ9C,QAAQ,OAAOzC,OAAO,WAGtD,eAAC,IAAD,CAAMwF,eAAe,gBAArB,UACE,cAAC,IAAD,CAASrJ,MAAM,WAAWwD,KAAK,KAA/B,sBAGA,cAAC,KAAD,CAAS8F,OAAK,EAACC,gBAAgB,SAASC,GAAG,SAAS1F,GAAG,eAAvD,SACE,cAAC,IAAD,CAAkB2F,GAAI,GAAIzJ,MAAM,uB,uCCxDtCoC,GAAwBpB,YAAOqB,IAAPrB,CAAH,+LAKvB,qBAAGyB,MAAkBkF,aAAaC,MAKhCC,GAAiB7G,YAAO8G,KAASC,MAAM,CAAEvE,KAAM,MAA9BxC,CAAH,kDA6BL0I,GA1BO,WACpB,IAAMC,EAAqBC,KAAM3G,QAAO,SAAC4G,GAAD,OAAWA,EAAKC,aAAeD,EAAKE,aAAalB,OAAOmB,SAAS,WACnGC,EAAsBC,KAAQP,EAAoB,CAAC,YAAa,OAAQ,CAAC,OAAQ,SAASQ,MAAM,EAAG,GAEnGC,EAAS,CAAC,QAAD,oBAAYH,EAAY5L,KAAI,SAACwL,GAAD,OAAUA,EAAKE,aAAalB,YAASwB,KAAK,MAErF,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASrK,MAAM,WAAWwD,KAAK,KAA/B,kBAGA,cAAC,GAAD,CAAgBxD,MAAM,mBAAtB,SAA0CoK,IAC1C,eAAC,IAAD,CAAMf,eAAe,gBAArB,UACE,cAAC,IAAD,CAASrJ,MAAM,WAAWwD,KAAK,KAA/B,sBAGA,cAAC,KAAD,CAAS8F,OAAK,EAACC,gBAAgB,SAASC,GAAG,SAAS1F,GAAG,WAAvD,SACE,cAAC,IAAD,CAAkB2F,GAAI,GAAIzJ,MAAM,uBC3B7BsK,GARkB,WAC/B,IAAMC,EAAe5F,eAIrB,OAHkBxC,aAAiBoI,GACZ1I,cAEWH,YCH9BU,GAAwBpB,YAAOqB,IAAPrB,CAAH,+IAKvB,qBAAGyB,MAAkBkF,aAAaC,MAKhCC,GAAiB7G,YAAO8G,KAASC,MAAM,CAAEvE,KAAM,MAA9BxC,CAAH,kDAgCLwJ,GA7BC,WACd,IAAMC,EAAeC,KAAKC,MAAML,MAEhC,OACE,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAStK,MAAM,WAAWwD,KAAK,KAA/B,0BAGA,cAAC,GAAD,CAAgBxD,MAAM,UAAtB,SACoB,IAAjByK,EAAA,WACKA,EAAa5F,kBAEjB,cAAC,KAAD,CAAUuE,UAAU,QAAQ9C,QAAQ,OAAOzC,OAAO,WAGtD,eAAC,IAAD,CAAMwF,eAAe,gBAArB,UACE,cAAC,IAAD,CAASrJ,MAAM,WAAWwD,KAAK,KAA/B,0BAGA,cAAC,KAAD,CAAS8F,OAAK,EAACC,gBAAgB,SAASC,GAAG,WAAW1F,GAAG,kBAAzD,SACE,cAAC,IAAD,CAAkB2F,GAAI,GAAIzJ,MAAM,uBC3BtC4K,GAAO5J,IAAOC,IAAV,4gBAaN,qBAAGwB,MAAkBkF,aAAaC,MAQhCiD,GAAQ7J,YAAO8J,IAAP9J,CAAH,8SAUP,qBAAGyB,MAAkBkF,aAAaoD,MAMlC,qBAAGtI,MAAkBkF,aAAaC,MAOhCoD,GAAWhK,YAAO8J,IAAP9J,CAAH,6PAQV,qBAAGyB,MAAkBkF,aAAaoD,MAMlC,qBAAGtI,MAAkBkF,aAAaC,MAqCvBqD,GA9BQ,WACrB,IAAM9J,EAAkBC,cAExB,OACE,eAAC8J,EAAA,EAAD,WACE,eAACN,GAAD,WACE,cAAC,IAAD,CAASO,GAAG,KAAK3H,KAAK,KAAKC,GAAG,OAAOzD,MAAM,YAA3C,SACGmB,EAAgB,IAAK,iBAExB,cAAC,KAAD,UAAOA,EAAgB,IAAK,0DAE9B,gCACE,eAAC0J,GAAD,WACE,cAACO,GAAD,IACA,cAACC,GAAD,OAEF,eAACL,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,OAEF,eAACH,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,e,oBCrGV,IAAIS,EAAeC,EAAQ,KACvBC,EAASD,EAAQ,KACjBE,EAAWF,EAAQ,KA0BvBG,EAAOC,QANP,SAAaC,GACX,OAAQA,GAASA,EAAM5H,OACnBsH,EAAaM,EAAOH,EAAUD,QAC9BlL,I,oBCzBN,IAAIuL,EAAWN,EAAQ,KA+BvBG,EAAOC,QAnBP,SAAsBC,EAAOE,EAAUC,GAIrC,IAHA,IAAI/M,GAAS,EACTgF,EAAS4H,EAAM5H,SAEVhF,EAAQgF,GAAQ,CACvB,IAAItE,EAAQkM,EAAM5M,GACd2B,EAAUmL,EAASpM,GAEvB,GAAe,MAAXiB,SAAiCL,IAAb0L,EACfrL,IAAYA,IAAYkL,EAASlL,GAClCoL,EAAWpL,EAASqL,IAE1B,IAAIA,EAAWrL,EACXsL,EAASvM,EAGjB,OAAOuM,I,kBCfTP,EAAOC,QAJP,SAAgBjM,EAAOwM,GACrB,OAAOxM,EAAQwM","file":"static/js/14.cd0a009e.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefTimeAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/MasterChefTime.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefTimeAddress(),\r\n        name: 'pendingTime',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefTimeAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/MasterChefTime.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefTimeAddress(),\r\n        name: 'pendingTime',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceMoneyBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n}\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceMoneyBusd()).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      <CardBusdValue value={earningsBusd} />\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceMoneyBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(usePriceMoneyBusd()).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      <CardBusdValue value={busdBalance} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'CAKE to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'CAKE in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting CAKE')\r\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\r\n                    count: balancesWithValue.length,\r\n                  })}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceMoneyBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n }\r\n`\r\nconst CakeWinnings = () => {\r\n  const { claimAmount } = useTotalClaim()\r\n  const cakeAmount = getBalanceNumber(claimAmount)\r\n  const claimAmountBusd = new BigNumber(cakeAmount).multipliedBy(usePriceMoneyBusd()).toNumber()\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={cakeAmount} lineHeight=\"1.5\" />\r\n      <CardBusdValue value={claimAmountBusd} decimals={2} />\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeWinnings\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalRewards } from 'hooks/useTickets'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePriceMoneyBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst LotteryJackpot = () => {\r\n  const TranslateString = useI18n()\r\n  const lotteryPrizeAmount = useTotalRewards()\r\n  const balance = getBalanceNumber(lotteryPrizeAmount)\r\n  const lotteryPrizeAmoutCake = balance.toLocaleString(undefined, {\r\n    maximumFractionDigits: 2,\r\n  })\r\n  const lotteryPrizeAmountBusd = new BigNumber(balance).multipliedBy(usePriceMoneyBusd()).toNumber()\r\n\r\n  return (\r\n    <>\r\n      <Text bold fontSize=\"24px\" style={{ lineHeight: '1.5' }}>\r\n        {lotteryPrizeAmoutCake} {TranslateString(999, 'CAKE')}\r\n      </Text>\r\n      <CardBusdValue value={lotteryPrizeAmountBusd} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default LotteryJackpot\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\r\nimport { useLotteryAllowance } from 'hooks/useAllowance'\r\nimport { useApproval } from 'hooks/useApproval'\r\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\r\nimport CakeWinnings from './CakeWinnings'\r\nimport LotteryJackpot from './LotteryJackpot'\r\nimport UnlockButton from '../../../components/UnlockButton'\r\n\r\nconst StyledLotteryCard = styled(Card)`\r\n  background-image: url('/images/ticket-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: flex;\r\n  margin-top: 24px;\r\n  button {\r\n    flex: 1 0 50%;\r\n  }\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\r\n  const [requesteClaim, setRequestedClaim] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const allowance = useLotteryAllowance()\r\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\r\n  const { claimAmount } = useTotalClaim()\r\n  const { onMultiClaim } = useMultiClaimLottery()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      setRequestedClaim(true)\r\n      const txHash = await onMultiClaim()\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedClaim(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiClaim, setRequestedClaim])\r\n\r\n  const renderLotteryTicketButtonBuyOrApprove = () => {\r\n    if (!allowance.toNumber()) {\r\n      return (\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n          {TranslateString(494, 'Approve CAKE')}\r\n        </Button>\r\n      )\r\n    }\r\n    return (\r\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\r\n        {TranslateString(558, 'Buy Tickets')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"CAKE\" />)\r\n\r\n  return (\r\n    <StyledLotteryCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(550, 'Your Lottery Winnings')}\r\n        </Heading>\r\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(552, 'CAKE to Collect')}:</Label>\r\n          <CakeWinnings />\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(554, 'Total jackpot this round')}:</Label>\r\n          <LotteryJackpot />\r\n        </Block>\r\n        {account ? (\r\n          <Actions>\r\n            <Button\r\n              id=\"dashboard-collect-winnings\"\r\n              disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\r\n              onClick={handleClaim}\r\n              style={{ marginRight: '8px' }}\r\n            >\r\n              {TranslateString(556, 'Collect Winnings')}\r\n            </Button>\r\n            {renderLotteryTicketButtonBuyOrApprove()}\r\n          </Actions>\r\n        ) : (\r\n          <Actions>\r\n            <UnlockButton width=\"100%\" />\r\n          </Actions>\r\n        )}\r\n      </CardBody>\r\n    </StyledLotteryCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'Cake Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total CAKE Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total CAKE Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New CAKE/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={25} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  const data = useGetStats()\r\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(762, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {data ? (\r\n          <>\r\n            <Heading size=\"xl\">{`$${tvl}`}</Heading>\r\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and Syrup Pools')}</Text>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Skeleton height={66} />\r\n          </>\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import { useEffect, useState } from 'react'\r\n\r\n/*\r\n * Due to Cors the api was forked and a proxy was created\r\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\r\n */\r\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\r\n\r\n/* eslint-disable camelcase */\r\n\r\nexport interface TradePair {\r\n  swap_pair_contract: string\r\n  base_symbol: string\r\n  quote_symbol: string\r\n  last_price: number\r\n  base_volume_24_h: number\r\n  quote_volume_24_h: number\r\n}\r\n\r\nexport interface ApiStatResponse {\r\n  update_at: string\r\n  '24h_total_volume': number\r\n  total_value_locked: number\r\n  total_value_locked_all: number\r\n  trade_pairs: {\r\n    [key: string]: TradePair\r\n  }\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<ApiStatResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`${baseUrl}/stat`)\r\n        const responsedata: ApiStatResponse = await response.json()\r\n\r\n        setData(responsedata)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFarmApy } from 'utils/apy'\r\nimport { useFarms, usePriceMoneyBusd, useGetApiPrices } from 'state/hooks'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPYCard = () => {\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const prices = useGetApiPrices()\r\n  const moneyPrice = usePriceMoneyBusd()\r\n\r\n  const highestApy = useMemo(() => {\r\n    const apys = farmsLP\r\n      // Filter inactive farms, because their theoretical APY is super high. In practice, it's 0.\r\n      .filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n      .map((farm) => {\r\n        if (farm.lpTotalInQuoteToken && prices) {\r\n          const quoteTokenPriceUsd = prices[farm.quoteToken.symbol.toLowerCase()]\r\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n          return getFarmApy(farm.poolWeight, moneyPrice, totalLiquidity)\r\n        }\r\n        return null\r\n      })\r\n\r\n    const maxApy = max(apys)\r\n    return maxApy?.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }, [moneyPrice, farmsLP, prices])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn up to\r\n        </Heading>\r\n        <CardMidContent color=\"#7645d9\">\r\n          {highestApy ? (\r\n            `${highestApy}% ${TranslateString(736, 'APR')}`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}\r\n        </CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Farms\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPYCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport pools from 'config/constants/pools'\r\nimport { Pool } from 'state/types'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(#53dee9, #7645d9);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAssetCard = () => {\r\n  const activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\r\n  const latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\r\n  // Always include CAKE\r\n  const assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn\r\n        </Heading>\r\n        <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Pools\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import { usePriceMoneyBusd } from 'state/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalRewards } from './useTickets'\r\n\r\nconst useLotteryTotalPrizesUsd = () => {\r\n  const totalRewards = useTotalRewards()\r\n  const totalCake = getBalanceNumber(totalRewards)\r\n  const moneyPriceBusd = usePriceMoneyBusd()\r\n\r\n  return totalCake * moneyPriceBusd.toNumber()\r\n}\r\n\r\nexport default useLotteryTotalPrizesUsd\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useLotteryTotalPrizesUsd from 'hooks/useLotteryTotalPrizesUsd'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst WinCard = () => {\r\n  const lotteryPrize = Math.round(useLotteryTotalPrizesUsd())\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Lottery with\r\n        </Heading>\r\n        <CardMidContent color=\"#7645d9\">\r\n          {lotteryPrize !== 0 ? (\r\n            `$${lotteryPrize.toLocaleString()}`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}\r\n        </CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            up for grabs\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default WinCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/pan-bg-mobile.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'PancakeSwap')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <LotteryCard />\r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAPYCard />\r\n          <EarnAssetCard />\r\n          <WinCard />\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"sourceRoot":""}